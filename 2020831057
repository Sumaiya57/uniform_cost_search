
#include <bits/stdc++.h>
using namespace std;

vector<vector<int> > graph;

map<pair<int, int>, int> cost;

// Function to find the minimum cost to reach goal state(s) from the starting state
vector<int> uniform_cost_search(vector<int> goal, int start)
{
    vector<int> answer;

    // Create a priority queue for exploring nodes with minimum cost first
    priority_queue<pair<int, int> > queue;

    // Initialize the answer vector with maximum possible values
    for (int i = 0; i < goal.size(); i++)
        answer.push_back(INT_MAX);

    // Insert the starting index with cost 0 into the priority queue
    queue.push(make_pair(0, start));

    map<int, int> visited;

    // Counter to keep track of how many goal states have been reached
    int count = 0;

    // Continue exploring until the priority queue is empty
    while (queue.size() > 0) {

        pair<int, int> p = queue.top();

        queue.pop();

        // Get the original cost value (positive value)
        p.first *= -1;

        // Check if the current node is one of the goal states
        if (find(goal.begin(), goal.end(), p.second) != goal.end()) {

            // Find the position of the current goal state in the list of goal states
            int index = find(goal.begin(), goal.end(),
                            p.second) - goal.begin();

            if (answer[index] == INT_MAX)
                count++;

            if (answer[index] > p.first)
                answer[index] = p.first;

            queue.pop();

            // Check if all goal states have been reached
            if (count == goal.size())
                return answer;
        }

        // Check for adjacent nodes that have not been visited yet
        if (visited[p.second] == 0)
            for (int i = 0; i < graph[p.second].size(); i++) {

                // Push the adjacent node into the priority queue with its updated cost
                queue.push(make_pair((p.first +
                cost[make_pair(p.second, graph[p.second][i])]) * -1,
                graph[p.second][i]));
            }

        // Mark the current node as visited
        visited[p.second] = 1;
    }

    return answer;
}

int main()
{
    // Create the graph
    graph.resize(6);

    // Add edges to the graph
    graph[0].push_back(1);
    graph[0].push_back(2);
    graph[1].push_back(3);
    graph[1].push_back(4);
    graph[3].push_back(5);
    graph[4].push_back(5);
    graph[4].push_back(2);
    graph[5].push_back(2);

    // Add the cost for each edge
    cost[make_pair(0, 1)] = 1;
    cost[make_pair(0, 2)] = 12;
    cost[make_pair(1, 3)] = 3;
    cost[make_pair(1, 4)] = 1;
    cost[make_pair(3, 5)] = 3;
    cost[make_pair(4, 5)] = 1;
    cost[make_pair(4, 2)] = 2;
    cost[make_pair(5, 2)] = 3;

    // Define the goal state(s)
    vector<int> goal;

    // Set the goal state(s) (there can be multiple)
    goal.push_back(2);

    // Find the minimum cost to reach the goal state(s) from the starting state
    vector<int> answer = uniform_cost_search(goal, 0);

    // Print the minimum cost
    cout << "Minimum cost from 0 to 2 is = "
        << answer[0] << endl;

    return 0;
}
